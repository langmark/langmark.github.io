// Generated by CoffeeScript 1.10.0
(function() {
  this.Hisogram = (function() {
    Hisogram.prototype.options = null;

    Hisogram.prototype.chart = null;

    Hisogram.prototype.views = null;

    Hisogram.prototype.currentView = null;

    function Hisogram(data, title) {
      var index, view;
      if (title == null) {
        title = '';
      }
      this.options = {
        title: title,
        width: '100%',
        height: 400,
        chartArea: {
          width: '85%',
          height: '80%'
        },
        legend: {
          position: 'none'
        },
        backgroundColor: "#eee",
        animation: {
          duration: 500
        },
        tooltip: {
          isHtml: true
        },
        logScale: false
      };
      this.views = [];
      for (index in data) {
        view = data[index];
        this.views[index] = view;
      }
    }

    Hisogram.prototype.setContainer = function(container) {
      var chartDiv, log, slow;
      this.currentView = 0;
      chartDiv = $('<div>');
      slow = $('<button>').addClass('btn btn-success btn-xs').text('Hide slow');
      slow.click((function(_this) {
        return function() {
          slow.toggleClass('btn-success').toggleClass('btn-primary');
          if (_this.currentView === 0) {
            slow.text('Show slow');
            return _this.draw(1);
          } else {
            slow.text('Hide slow');
            return _this.draw(0);
          }
        };
      })(this));
      log = $('<button>').addClass('btn btn-success btn-xs').text('Log scale');
      log.click((function(_this) {
        return function() {
          log.toggleClass('btn-success').toggleClass('btn-primary');
          if (_this.options.logScale) {
            log.text('Log scale');
            _this.options.logScale = 0;
            return _this.draw(_this.currentView);
          } else {
            log.text('Linear scale');
            _this.options.logScale = 1;
            return _this.draw(_this.currentView);
          }
        };
      })(this));
      container.append(slow);
      container.append(log);
      container.append(chartDiv);
      return this.chart = new google.visualization.ColumnChart(chartDiv[0]);
    };

    Hisogram.prototype.draw = function(view_idx) {
      if (view_idx == null) {
        view_idx = 0;
      }
      this.chart.draw(this.views[view_idx], this.options);
      return this.currentView = view_idx;
    };

    return Hisogram;

  })();

  this.Lang = (function() {
    Lang.prototype.times = null;

    function Lang(times1) {
      this.times = times1;
    }

    Lang.prototype.getMin = function() {
      var best, compiler, j, len, ref;
      best = Infinity;
      ref = this.times;
      for (j = 0, len = ref.length; j < len; j++) {
        compiler = ref[j];
        best = Math.min(best, compiler.time);
      }
      return best;
    };

    Lang.prototype.getAverage = function() {
      var compiler, j, len, ref, sum;
      sum = 0;
      ref = this.times;
      for (j = 0, len = ref.length; j < len; j++) {
        compiler = ref[j];
        sum += compiler.time;
      }
      return sum / this.times.length;
    };

    Lang.prototype.getRow = function(name, cols, average) {
      var i, j, ref, row, shift, times, tooltip;
      times = this.times.filter(function(time) {
        return time.time < average;
      });
      shift = ((cols - times.length) / 2) | 0;
      row = [name];
      for (i = j = 0, ref = cols; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (i < shift || i >= shift + times.length) {
          row.push([0, '']);
        } else {
          tooltip = "<div class='column-tooltip'> <h1>" + times[i - shift].name + "</h1> <dl> <dt>Version</dt> <dd>" + (times[i - shift].version.replace("\n", "<br>")) + "</dd> <dt>Time</dt> <dd>" + (times[i - shift].time.toFixed(3)) + "</dd> </dl>";
          row.push([times[i - shift].time * 1000 | 0, tooltip]);
        }
      }
      return row;
    };

    return Lang;

  })();

  this.Test = (function() {
    Test.prototype.name = null;

    Test.prototype.langs = null;

    Test.prototype.chart = null;

    function Test(name1, langs) {
      var lang, times;
      this.name = name1;
      this.langs = {};
      for (lang in langs) {
        times = langs[lang];
        if (times.length > 0) {
          this.langs[lang] = new Lang(times);
        }
      }
      this.chart = this.getHistogram();
    }

    Test.prototype.getAverage = function() {
      var _, count, ref, sum, tests;
      sum = 0;
      count = 0;
      ref = this.langs;
      for (_ in ref) {
        tests = ref[_];
        sum += tests.getAverage();
        count++;
      }
      return sum / count;
    };

    Test.prototype.getHistogram = function() {
      var data;
      data = [this.getChartData(false), this.getChartData(true)];
      return new Hisogram(data);
    };

    Test.prototype.getColsNumber = function() {
      var lang, max, ref, times;
      max = 0;
      ref = this.langs;
      for (lang in ref) {
        times = ref[lang];
        max = Math.max(max, times.times.length);
      }
      return max;
    };

    Test.prototype.getChartData = function(hideSlow) {
      var _, average, cols, data, dataTable, i, j, lang, parsedData, ref, ref1, row, times;
      if (hideSlow == null) {
        hideSlow = false;
      }
      dataTable = new google.visualization.DataTable();
      cols = this.getColsNumber();
      dataTable.addColumn('string', 'Language');
      for (i = j = 0, ref = cols; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        dataTable.addColumn('number', '');
        dataTable.addColumn({
          type: 'string',
          role: 'tooltip',
          p: {
            html: true
          }
        });
      }
      average = hideSlow ? this.getAverage() : Infinity;
      data = [];
      ref1 = this.langs;
      for (lang in ref1) {
        times = ref1[lang];
        if (hideSlow === false || times.getMin() < average) {
          data.push(times.getRow(lang, cols, average));
        }
      }
      data = data.sort(function(a, b) {
        var k, l, min1, min2, ref2, ref3;
        min1 = min2 = Infinity;
        for (i = k = 1, ref2 = a.length; 1 <= ref2 ? k < ref2 : k > ref2; i = 1 <= ref2 ? ++k : --k) {
          if (a[i][0]) {
            min1 = Math.min(min1, a[i][0]);
          }
        }
        for (i = l = 1, ref3 = b.length; 1 <= ref3 ? l < ref3 : l > ref3; i = 1 <= ref3 ? ++l : --l) {
          if (b[i][0]) {
            min2 = Math.min(min2, b[i][0]);
          }
        }
        return min1 - min2;
      });
      parsedData = [];
      for (_ in data) {
        row = data[_];
        parsedData.push([].concat.apply([], row));
      }
      dataTable.addRows(parsedData);
      return dataTable;
    };

    return Test;

  })();

  this.Table = (function() {
    Table.prototype.lang = null;

    Table.prototype.data = null;

    function Table(lang1, data) {
      this.lang = lang1;
      this.buildData(data);
    }

    Table.prototype.buildData = function(data) {
      var compiler, i, lang, langs, results, test;
      this.data = {};
      results = [];
      for (test in data) {
        langs = data[test];
        lang = langs[this.lang];
        if (!lang) {
          continue;
        }
        results.push((function() {
          var base, name1, results1;
          results1 = [];
          for (i in lang) {
            compiler = lang[i];
            if ((base = this.data)[name1 = compiler.name] == null) {
              base[name1] = {};
            }
            results1.push(this.data[compiler.name][test] = compiler.time);
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Table.prototype.getTests = function() {
      var compiler, ref, res, test, tests;
      res = {};
      ref = this.data;
      for (compiler in ref) {
        tests = ref[compiler];
        for (test in tests) {
          res[test] = 1;
        }
      }
      return Object.keys(res).sort();
    };

    return Table;

  })();

  this.Analyzer = (function() {
    Analyzer.prototype.filename = null;

    Analyzer.prototype.name = null;

    Analyzer.prototype.data = null;

    Analyzer.prototype.analyzed = null;

    Analyzer.prototype.tests = null;

    Analyzer.prototype.tables = null;

    function Analyzer(filename, name1) {
      this.filename = filename;
      this.name = name1;
      this.analyzed = false;
      this.tests = {};
      this.tables = {};
    }

    Analyzer.prototype.loadData = function($http, run_analysis, callback) {
      if (run_analysis == null) {
        run_analysis = true;
      }
      if (this.analyzed && callback) {
        return callback();
      }
      return $http.get(this.filename).then((function(_this) {
        return function(data) {
          _this.data = data.data;
          if (run_analysis) {
            _this.analyze();
          }
          if (callback) {
            return callback();
          }
        };
      })(this));
    };

    Analyzer.prototype.analyze = function() {
      var langs, ref, test;
      if (this.analyzed) {
        return;
      }
      console.log("Analysis of " + this.filename + " started");
      ref = this.data;
      for (test in ref) {
        langs = ref[test];
        this.tests[test] = new Test(test, langs);
      }
      return this.analyzed = true;
    };

    Analyzer.prototype.draw = function() {
      this.drawChart();
      return this.drawTable();
    };

    Analyzer.prototype.drawChart = function() {
      var _, div, langs, ref, results, test;
      $('#container').empty();
      ref = Object.keys(this.tests).sort();
      results = [];
      for (_ in ref) {
        test = ref[_];
        langs = this.tests[test];
        div = $("<div>").attr('id', test);
        div.append(this.getTitle(test));
        $('#container').append(div);
        langs.chart.setContainer(div);
        langs.chart.draw(0);
        results.push($('#container').append('<br>'));
      }
      return results;
    };

    Analyzer.prototype.drawTable = function() {
      var _, lang, ref, results;
      ref = this.getLangs();
      results = [];
      for (_ in ref) {
        lang = ref[_];
        results.push(this.tables[lang] = new Table(lang, this.data));
      }
      return results;
    };

    Analyzer.prototype.getLangs = function() {
      var lang, langs, ref, res, test;
      res = {};
      ref = this.data;
      for (test in ref) {
        langs = ref[test];
        for (lang in langs) {
          res[lang] = 1;
        }
      }
      return Object.keys(res).sort();
    };

    Analyzer.prototype.getTitle = function(name) {
      var a;
      a = $('<a href="#">');
      a.text(name);
      a.click((function(_this) {
        return function() {
          return $.ajax({
            url: "https://raw.githubusercontent.com/langmark/langmark/master/" + name + "/README.md",
            dataType: 'text',
            success: function(data) {
              $('.modal-body').html(marked(data));
              $('.modal-title').text(name);
              return $('#modal').modal();
            },
            error: function() {
              $('.modal-body').html('<em>No description available...</em>');
              $('.modal-title').text(name);
              return $('#modal').modal();
            }
          });
        };
      })(this));
      return $('<h2>').append(a);
    };

    return Analyzer;

  })();

}).call(this);
